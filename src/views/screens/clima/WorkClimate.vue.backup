<template>
  <div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
    <!-- Header mejorado -->
    <header class="bg-white shadow-lg border-b-2 border-blue-200">
      <div class="max-w-7xl mx-auto px-6 py-6">
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-4">
            <div class="w-12 h-12 bg-gradient-to-br from-blue-600 to-blue-700 rounded-xl flex items-center justify-center">
              <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
              </svg>
            </div>
            <div>
              <h1 class="text-3xl font-bold text-gray-900">MINOIL - Clima Laboral</h1>
              <p class="text-sm text-gray-600">Sistema de Reportes Comparativos</p>
            </div>
          </div>
        </div>
      </div>
    </header>

    <!-- Loading mejorado -->
    <div v-if="cargando" class="flex items-center justify-center py-32">
      <div class="text-center">
        <div class="relative">
          <div class="animate-spin rounded-full h-16 w-16 border-4 border-blue-200 border-t-blue-600 mx-auto mb-6"></div>
          <div class="absolute inset-0 flex items-center justify-center">
            <div class="w-6 h-6 bg-blue-600 rounded-full animate-pulse"></div>
          </div>
        </div>
        <h3 class="text-xl font-semibold text-gray-900 mb-2">Cargando Datos</h3>
        <p class="text-gray-600">Obteniendo informacion del clima laboral...</p>
      </div>
    </div>

    <!-- Error mejorado -->
    <div v-else-if="error" class="max-w-4xl mx-auto px-6 py-12">
      <div class="bg-gradient-to-r from-red-50 to-red-100 border-2 border-red-200 rounded-2xl p-8 shadow-lg">
        <div class="flex items-center">
          <div class="w-12 h-12 bg-red-500 rounded-full flex items-center justify-center mr-4">
            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <div class="flex-1">
            <h3 class="text-xl font-bold text-red-800 mb-2">Error al Cargar Datos</h3>
            <p class="text-red-700 mb-4">{{ error }}</p>
            <button @click="cargarDatos" 
                    class="px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
              Reintentar Carga
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Contenido principal -->
    <main v-else class="max-w-7xl mx-auto px-6 py-8 space-y-8">
      
      <!-- Panel de Filtros Mejorado -->
      <div class="bg-white rounded-2xl shadow-xl p-8 border border-gray-200">
        <div class="flex items-center justify-between mb-6">
          <div class="flex items-center space-x-3">
            <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
              <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.414A1 1 0 013 6.707V4z"></path>
              </svg>
            </div>
            <h2 class="text-2xl font-bold text-gray-900">Filtros de Analisis</h2>
          </div>
          <div v-if="filtrosActivos" class="flex items-center space-x-2">
            <span class="px-3 py-1 bg-blue-100 text-blue-800 text-sm font-medium rounded-full">
              {{ contadorFiltros }} filtro(s) activo(s)
            </span>
            <button @click="limpiarFiltros" 
                    class="px-4 py-2 text-sm bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">
              Limpiar Todo
            </button>
          </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <!-- Filtro Regional -->
          <div class="space-y-2">
            <label class="block text-sm font-bold text-gray-800">Regional</label>
            <select v-model="filtroRegional" @change="actualizarDatos" 
                    class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all">
              <option value="">üåç Todas las regionales</option>
              <option v-for="regional in regionalesDisponibles" :key="regional" :value="regional">
                üìç {{ regional }}
              </option>
            </select>
            <p class="text-xs text-gray-500">{{ regionalesDisponibles.length }} regionales disponibles</p>
          </div>

          <!-- Filtro Area -->
          <div class="space-y-2">
            <label class="block text-sm font-bold text-gray-800">Area de Trabajo</label>
            <select v-model="filtroArea" @change="actualizarDatos" 
                    class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all">
              <option value="">üè¢ Todas las areas</option>
              <option v-for="area in areasDisponibles" :key="area" :value="area">
                üîß {{ area }}
              </option>
            </select>
            <p class="text-xs text-gray-500">{{ areasDisponibles.length }} areas disponibles</p>
          </div>

          <!-- Filtro Pregunta -->
          <div class="space-y-2">
            <label class="block text-sm font-bold text-gray-800">
              Pregunta a Analizar 
              <span class="text-red-500">*</span>
            </label>
            <select v-model="preguntaSeleccionada" @change="actualizarDatos" 
                    class="w-full px-4 py-3 border-2 border-gray-300 rounded-xl focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all">
              <option value="">‚ùì Seleccionar pregunta</option>
              <option v-for="pregunta in preguntasOrdenadas" :key="pregunta.id" :value="pregunta.id">
                {{ pregunta.id }}. {{ pregunta.texto.substring(0, 60) }}{{ pregunta.texto.length > 60 ? '...' : '' }}
              </option>
            </select>
            <p class="text-xs text-gray-500">39 preguntas ordenadas del 1 al 39</p>
          </div>
        </div>

        <!-- Resumen de filtros -->
        <div v-if="filtrosActivos" class="mt-6 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl border border-blue-200">
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-4">
              <span class="text-sm font-bold text-blue-900">Filtros Activos:</span>
              <div class="flex flex-wrap gap-2">
                <span v-if="filtroRegional" class="px-3 py-1 bg-blue-200 text-blue-900 text-sm rounded-full font-medium">
                  üìç {{ filtroRegional }}
                </span>
                <span v-if="filtroArea" class="px-3 py-1 bg-green-200 text-green-900 text-sm rounded-full font-medium">
                  üè¢ {{ filtroArea }}
                </span>
                <span v-if="preguntaSeleccionada" class="px-3 py-1 bg-purple-200 text-purple-900 text-sm rounded-full font-medium">
                  ‚ùì Pregunta {{ preguntaSeleccionada }}
                </span>
              </div>
            </div>
            <span class="text-sm font-bold text-blue-600">{{ totalRespuestas }} respuestas</span>
          </div>
        </div>
      </div>



      <!-- Reporte Visual Principal -->
      <div v-if="preguntaSeleccionada && datosVista.length > 0" class="bg-white rounded-2xl shadow-xl p-8 border border-gray-200">
        
        <!-- Header del reporte -->
        <div class="flex items-center justify-between mb-8">
          <div class="flex-1">
            <div class="flex items-center space-x-3 mb-3">
              <div class="w-10 h-10 bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl flex items-center justify-center">
                <span class="text-white font-bold text-lg">{{ preguntaSeleccionada }}</span>
              </div>
              <div>
                <h2 class="text-2xl font-bold text-gray-900">{{ preguntaActual?.categoria }}</h2>
                <div class="flex items-center space-x-2 mt-1">
                  <span class="px-2 py-1 bg-purple-100 text-purple-800 text-xs font-medium rounded">
                    {{ totalRespuestas }} respuestas
                  </span>
                  <span class="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded">
                    {{ datosVista.length }} regionales
                  </span>
                </div>
              </div>
            </div>
            <p class="text-gray-700 font-medium">{{ preguntaActual?.texto }}</p>
          </div>
        </div>

        <!-- Grafico Horizontal por Regional con Shadcn -->
        <Card class="mb-8">
          <CardHeader class="text-center">
            <CardTitle class="text-2xl lg:text-3xl flex items-center justify-center">
              <svg class="w-8 h-8 mr-3 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2 2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 0 01-2-2z"></path>
              </svg>
              Comportamiento por Regional
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div class="space-y-6">
              <div v-for="regional in datosVista" :key="regional.regional" class="space-y-3">
                <!-- Header de la regional -->
                <div class="flex items-center justify-between">
                  <div class="flex items-center space-x-3">
                    <div class="w-3 h-3 rounded-full bg-primary"></div>
                    <span class="font-semibold text-lg">{{ regional.regional }}</span>
                    <span class="text-sm text-muted-foreground">({{ regional.total }} respuestas)</span>
                  </div>
                  <div class="text-right">
                    <span class="text-lg font-bold" :class="{
                      'text-green-600': regional.porcentajePositivo >= 70,
                      'text-yellow-600': regional.porcentajePositivo >= 50 && regional.porcentajePositivo < 70,
                      'text-red-600': regional.porcentajePositivo < 50
                    }">
                      {{ regional.porcentajePositivo }}%
                    </span>
                  </div>
                </div>

                <!-- Barras para preguntas 1-9 (5 estados) -->
                <div v-if="preguntaSeleccionada >= 1 && preguntaSeleccionada <= 9" class="space-y-2">
                  <div class="grid grid-cols-5 gap-2">
                    <div class="text-center">
                      <div class="text-xs font-medium text-emerald-700 mb-1">Muy Bueno</div>
                      <Progress :model-value="regional.porcentajeMuyBueno" class="h-6 [&>div]:bg-emerald-500" />
                      <div class="text-xs mt-1">{{ regional.porcentajeMuyBueno }}%</div>
                    </div>
                    <div class="text-center">
                      <div class="text-xs font-medium text-green-700 mb-1">Bueno</div>
                      <Progress :model-value="regional.porcentajeBueno" class="h-6 [&>div]:bg-green-500" />
                      <div class="text-xs mt-1">{{ regional.porcentajeBueno }}%</div>
                    </div>
                    <div class="text-center">
                      <div class="text-xs font-medium text-yellow-700 mb-1">Regular</div>
                      <Progress :model-value="regional.porcentajeRegular" class="h-6 [&>div]:bg-yellow-500" />
                      <div class="text-xs mt-1">{{ regional.porcentajeRegular }}%</div>
                    </div>
                    <div class="text-center">
                      <div class="text-xs font-medium text-orange-700 mb-1">Malo</div>
                      <Progress :model-value="regional.porcentajeMalo" class="h-6 [&>div]:bg-orange-500" />
                      <div class="text-xs mt-1">{{ regional.porcentajeMalo }}%</div>
                    </div>
                    <div class="text-center">
                      <div class="text-xs font-medium text-red-700 mb-1">Muy Malo</div>
                      <Progress :model-value="regional.porcentajeMuyMalo" class="h-6 [&>div]:bg-red-500" />
                      <div class="text-xs mt-1">{{ regional.porcentajeMuyMalo }}%</div>
                    </div>
                  </div>
                </div>

                <!-- Barras para preguntas de opciones directas (14, 36) -->
                <div v-else-if="[14,36].includes(parseInt(preguntaSeleccionada))" class="space-y-2">
                  <div class="grid gap-2" :class="`grid-cols-${Math.min(opcionesDinamicas.length, 4)}`">
                    <div v-for="(opcion, index) in opcionesDinamicas" :key="opcion" class="text-center">
                      <div class="text-xs font-medium mb-1" :style="{ color: `hsl(${200 + index * 40}, 70%, 40%)` }">
                        {{ opcion.length > 12 ? opcion.substring(0, 12) + '...' : opcion }}
                      </div>
                      <Progress 
                        :model-value="Math.round((regional[opcion] || 0) / regional.total * 100)" 
                        class="h-6"
                        :style="`--progress-background: hsl(${200 + index * 40}, 70%, 50%)`"
                      />
                      <div class="text-xs mt-1">{{ regional[opcion] || 0 }}</div>
                    </div>
                  </div>
                </div>

                <!-- Barras para otras preguntas (positivo/negativo) -->
                <div v-else class="space-y-2">
                  <div class="grid grid-cols-2 gap-4">
                    <div class="text-center">
                      <div class="text-xs font-medium text-green-700 mb-1">Positivo</div>
                      <Progress :model-value="regional.porcentajePositivo" class="h-6 [&>div]:bg-green-500" />
                      <div class="text-xs mt-1">{{ regional.porcentajePositivo }}%</div>
                    </div>
                    <div class="text-center">
                      <div class="text-xs font-medium text-red-700 mb-1">Negativo</div>
                      <Progress :model-value="regional.porcentajeNegativo" class="h-6 [&>div]:bg-red-500" />
                      <div class="text-xs mt-1">{{ regional.porcentajeNegativo }}%</div>
                    </div>
                  </div>
                </div>

              </div>
            </div>
          </CardContent>
        </Card>

        <!-- Resto del contenido sigue igual...
              <div class="flex items-end justify-center space-x-1 sm:space-x-2 lg:space-x-3 h-full pb-12 lg:pb-16 overflow-x-auto">
                <div v-for="regional in datosVista" :key="regional.regional" 
                     class="flex flex-col items-center group cursor-pointer transition-all hover:scale-105 min-w-0">
                  
                  <!-- Barras apiladas para preguntas 1-9 (5 estados) -->
                  <div v-if="preguntaSeleccionada >= 1 && preguntaSeleccionada <= 9" 
                       class="flex flex-col items-center space-y-0.5 h-48 lg:h-64 justify-end mb-2">
                    <!-- Muy Bueno -->
                    <div class="w-8 sm:w-10 lg:w-14 bg-gradient-to-t from-emerald-600 to-emerald-500 flex items-center justify-center text-white text-xs font-bold shadow-lg transition-all group-hover:shadow-xl"
                         :style="{ height: Math.max(regional.porcentajeMuyBueno * 1.8, 4) + 'px' }">
                      <span class="transform -rotate-90 origin-center whitespace-nowrap hidden sm:block">{{ regional.porcentajeMuyBueno }}%</span>
                    </div>
                    <!-- Bueno -->
                    <div class="w-8 sm:w-10 lg:w-14 bg-gradient-to-t from-green-500 to-green-400 flex items-center justify-center text-white text-xs font-bold shadow-lg transition-all group-hover:shadow-xl"
                         :style="{ height: Math.max(regional.porcentajeBueno * 1.8, 4) + 'px' }">
                      <span class="transform -rotate-90 origin-center whitespace-nowrap hidden sm:block">{{ regional.porcentajeBueno }}%</span>
                    </div>
                    <!-- Regular -->
                    <div class="w-8 sm:w-10 lg:w-14 bg-gradient-to-t from-yellow-500 to-yellow-400 flex items-center justify-center text-white text-xs font-bold shadow-lg transition-all group-hover:shadow-xl"
                         :style="{ height: Math.max(regional.porcentajeRegular * 1.8, 4) + 'px' }">
                      <span class="transform -rotate-90 origin-center whitespace-nowrap hidden sm:block">{{ regional.porcentajeRegular }}%</span>
                    </div>
                    <!-- Malo -->
                    <div class="w-8 sm:w-10 lg:w-14 bg-gradient-to-t from-orange-500 to-orange-400 flex items-center justify-center text-white text-xs font-bold shadow-lg transition-all group-hover:shadow-xl"
                         :style="{ height: Math.max(regional.porcentajeMalo * 1.8, 4) + 'px' }">
                      <span class="transform -rotate-90 origin-center whitespace-nowrap hidden sm:block">{{ regional.porcentajeMalo }}%</span>
                    </div>
                    <!-- Muy Malo -->
                    <div class="w-8 sm:w-10 lg:w-14 bg-gradient-to-t from-red-600 to-red-500 rounded-b-lg flex items-center justify-center text-white text-xs font-bold shadow-lg transition-all group-hover:shadow-xl"
                         :style="{ height: Math.max(regional.porcentajeMuyMalo * 1.8, 4) + 'px' }">
                      <span class="transform -rotate-90 origin-center whitespace-nowrap hidden sm:block">{{ regional.porcentajeMuyMalo }}%</span>
                    </div>
                  </div>

                  <!-- Barras para preguntas de opciones directas (14, 36) -->
                  <div v-else-if="[14,36].includes(parseInt(preguntaSeleccionada))" 
                       class="flex flex-col items-center space-y-0.5 h-48 lg:h-64 justify-end mb-2">
                    <!-- Todas las opciones din√°micas -->
                    <div v-for="(opcion, index) in opcionesDinamicas" :key="opcion"
                         class="w-8 sm:w-10 lg:w-14 flex items-center justify-center text-white text-xs font-bold shadow-lg transition-all group-hover:shadow-xl"
                         :class="[
                           index === 0 ? 'rounded-t-lg' : '',
                           index === opcionesDinamicas.length - 1 ? 'rounded-b-lg' : ''
                         ]"
                         :style="{ 
                           height: Math.max(((regional[opcion] || 0) / regional.total * 100) * 1.8, 8) + 'px',
                           background: `linear-gradient(to top, hsl(${200 + index * 40}, 70%, ${50 - index * 3}%), hsl(${200 + index * 40}, 70%, ${60 - index * 3}%))`
                         }">
                      <span class="transform -rotate-90 origin-center whitespace-nowrap hidden sm:block">
                        {{ Math.round(((regional[opcion] || 0) / regional.total * 100)) }}%
                      </span>
                    </div>
                  </div>

                  <!-- Barras apiladas para preguntas Si/No (din√°micas) -->
                  <div v-else-if="[10,15,24,25,31,32,37,39].includes(parseInt(preguntaSeleccionada))" 
                       class="flex flex-col items-center space-y-0.5 h-48 lg:h-64 justify-end mb-2">
                    <!-- Si -->
                    <div class="w-8 sm:w-10 lg:w-14 bg-gradient-to-t from-green-600 to-green-500 flex items-center justify-center text-white text-xs font-bold shadow-lg transition-all group-hover:shadow-xl"
                         :style="{ height: Math.max((regional.si / regional.total * 100) * 1.8, 3) + 'px' }">
                      <span class="transform -rotate-90 origin-center whitespace-nowrap hidden sm:block">{{ Math.round(regional.si / regional.total * 100) }}%</span>
                    </div>
                    <!-- Opciones din√°micas de additional_info -->
                    <div v-for="(opcion, index) in opcionesDinamicas" :key="opcion"
                         class="w-8 sm:w-10 lg:w-14 flex items-center justify-center text-white text-xs font-bold shadow-lg transition-all group-hover:shadow-xl"
                         :class="[
                           index === opcionesDinamicas.length - 1 ? 'rounded-b-lg' : '',
                           `bg-gradient-to-t from-red-${Math.min(400 + index * 50, 800)} to-red-${Math.min(300 + index * 50, 700)}`
                         ]"
                         :style="{ 
                           height: Math.max(((regional[opcion] || 0) / regional.total * 100) * 1.8, 3) + 'px',
                           background: `linear-gradient(to top, hsl(${350 - index * 30}, 70%, ${50 - index * 5}%), hsl(${350 - index * 30}, 70%, ${60 - index * 5}%))`
                         }">
                      <span class="transform -rotate-90 origin-center whitespace-nowrap hidden sm:block">
                        {{ Math.round(((regional[opcion] || 0) / regional.total * 100)) }}%
                      </span>
                    </div>
                  </div>

                  <!-- Barras apiladas para preguntas 10-39 (3 estados) -->
                  <div v-else class="flex flex-col items-center space-y-1 h-48 lg:h-64 justify-end mb-2">
                    <!-- Barra Positiva -->
                    <div class="w-8 sm:w-10 lg:w-14 bg-gradient-to-t from-green-500 to-green-400 rounded-t-lg flex items-end justify-center text-white text-xs font-bold pb-1 shadow-lg transition-all group-hover:shadow-xl"
                         :style="{ height: Math.max(regional.porcentajePositivo * 1.8, 8) + 'px' }">
                      <span class="transform -rotate-90 origin-center whitespace-nowrap hidden sm:block">{{ regional.porcentajePositivo }}%</span>
                    </div>
                    <!-- Barra Negativa -->
                    <div class="w-8 sm:w-10 lg:w-14 bg-gradient-to-b from-red-500 to-red-400 rounded-b-lg flex items-start justify-center text-white text-xs font-bold pt-1 shadow-lg transition-all group-hover:shadow-xl"
                         :style="{ height: Math.max(regional.porcentajeNegativo * 1.8, 8) + 'px' }">
                      <span class="transform -rotate-90 origin-center whitespace-nowrap hidden sm:block">{{ regional.porcentajeNegativo }}%</span>
                    </div>
                  </div>
                  
                  <!-- Etiquetas -->
                  <div class="text-center">
                    <div class="text-xs sm:text-sm font-bold text-gray-800 mb-1 transform -rotate-45 origin-center w-12 sm:w-16 lg:w-20">
                      {{ regional.regional }}
                    </div>
                    <div class="text-xs text-gray-600 bg-white px-1 sm:px-2 py-1 rounded-full shadow">
                      {{ regional.total }}
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Leyenda dinamica -->
              <div class="absolute bottom-0 left-0 right-0 flex justify-center flex-wrap gap-2 lg:gap-4">
                <!-- Leyenda para preguntas 1-9 -->
                <template v-if="preguntaSeleccionada >= 1 && preguntaSeleccionada <= 9">
                  <div class="flex items-center space-x-1">
                    <div class="w-3 h-3 bg-emerald-600 rounded shadow"></div>
                    <span class="text-xs font-semibold text-gray-700">Muy Bueno</span>
                  </div>
                  <div class="flex items-center space-x-1">
                    <div class="w-3 h-3 bg-green-500 rounded shadow"></div>
                    <span class="text-xs font-semibold text-gray-700">Bueno</span>
                  </div>
                  <div class="flex items-center space-x-1">
                    <div class="w-3 h-3 bg-yellow-500 rounded shadow"></div>
                    <span class="text-xs font-semibold text-gray-700">Regular</span>
                  </div>
                  <div class="flex items-center space-x-1">
                    <div class="w-3 h-3 bg-orange-500 rounded shadow"></div>
                    <span class="text-xs font-semibold text-gray-700">Malo</span>
                  </div>
                  <div class="flex items-center space-x-1">
                    <div class="w-3 h-3 bg-red-600 rounded shadow"></div>
                    <span class="text-xs font-semibold text-gray-700">Muy Malo</span>
                  </div>
                </template>
                <!-- Leyenda para preguntas de opciones directas (14, 36) -->
                <template v-else-if="[14,36].includes(parseInt(preguntaSeleccionada))">
                  <div v-for="(opcion, index) in opcionesDinamicas" :key="opcion" class="flex items-center space-x-1">
                    <div class="w-3 h-3 rounded shadow" 
                         :style="{ background: `hsl(${200 + index * 40}, 70%, ${55 - index * 3}%)` }"></div>
                    <span class="text-xs font-semibold text-gray-700">{{ opcion.length > 20 ? opcion.substring(0, 20) + '...' : opcion }}</span>
                  </div>
                </template>
                <!-- Leyenda para preguntas Si/No -->
                <template v-else-if="[10,15,24,25,31,32,37,39].includes(parseInt(preguntaSeleccionada))">
                  <div class="flex items-center space-x-1">
                    <div class="w-3 h-3 bg-green-600 rounded shadow"></div>
                    <span class="text-xs font-semibold text-gray-700">Si</span>
                  </div>
                  <div v-for="(opcion, index) in opcionesDinamicas" :key="opcion" class="flex items-center space-x-1">
                    <div class="w-3 h-3 rounded shadow" 
                         :style="{ background: `hsl(${350 - index * 30}, 70%, ${55 - index * 5}%)` }"></div>
                    <span class="text-xs font-semibold text-gray-700">{{ opcion.length > 15 ? opcion.substring(0, 15) + '...' : opcion }}</span>
                  </div>
                </template>
                <!-- Leyenda para preguntas generales -->
                <template v-else>
                  <div class="flex items-center space-x-2">
                    <div class="w-4 h-4 bg-gradient-to-r from-green-500 to-green-400 rounded shadow"></div>
                    <span class="text-sm font-semibold text-gray-700">Respuestas Positivas</span>
                  </div>
                  <div class="flex items-center space-x-2">
                    <div class="w-4 h-4 bg-gradient-to-r from-red-500 to-red-400 rounded shadow"></div>
                    <span class="text-sm font-semibold text-gray-700">Respuestas Negativas</span>
                  </div>
                </template>
              </div>
            </div>
          </div>
        </div>

        <!-- Grafico Nacional (Dona) -->
        <div class="grid grid-cols-1 xl:grid-cols-2 gap-8 mb-8">
        <div class="xl:col-span-1">
          <div class="bg-gradient-to-br from-gray-900 to-gray-800 rounded-2xl p-6 text-white border border-gray-700">
            <h3 class="text-xl font-bold text-center mb-6">
              üáßüá¥ Resumen Nacional
            </h3>
            <!-- Para preguntas de opciones directas (14, 36) -->
            <div v-if="[14,36].includes(parseInt(preguntaSeleccionada))" class="space-y-3">
              <div v-for="(opcion, index) in opcionesDinamicas" :key="opcion" class="flex items-center justify-between bg-white bg-opacity-10 rounded-xl p-3 backdrop-blur">
                <div class="flex items-center space-x-3">
                  <div class="w-4 h-4 rounded-full" :style="{ background: `hsl(${200 + index * 40}, 70%, ${55 - index * 3}%)` }"></div>
                  <span class="text-white font-medium text-sm">{{ opcion.length > 35 ? opcion.substring(0, 35) + '...' : opcion }}</span>
                </div>
                <div class="text-right">
                  <div class="text-xl font-bold text-white">{{ datosVista.reduce((sum, r) => sum + (r[opcion] || 0), 0) }}</div>
                  <div class="text-xs text-gray-300">respuestas</div>
                </div>
              </div>
            </div>
            
            <!-- Para otras preguntas (gr√°fico donut tradicional) -->
            <div v-else class="flex items-center justify-center h-80">
              <div class="relative">
                <!-- SVG Donut Chart mejorado -->
                <svg width="220" height="220" class="transform -rotate-90">
                  <!-- Circulo base -->
                  <circle cx="110" cy="110" r="85" 
                          fill="transparent" 
                          stroke="#374151" 
                          stroke-width="25"
                          class="drop-shadow-lg">
                  </circle>
                  <!-- Segmento positivo -->
                  <circle cx="110" cy="110" r="85" 
                          fill="transparent" 
                          stroke="#10B981" 
                          stroke-width="25"
                          :stroke-dasharray="`${porcentajePositivoTotal * 534 / 100} 534`"
                          stroke-dashoffset="0"
                          class="drop-shadow-lg transition-all duration-1000">
                  </circle>
                  <!-- Segmento negativo -->
                  <circle cx="110" cy="110" r="85" 
                          fill="transparent" 
                          stroke="#EF4444" 
                          stroke-width="25"
                          :stroke-dasharray="`${porcentajeNegativoTotal * 534 / 100} 534`"
                          :stroke-dashoffset="`-${porcentajePositivoTotal * 534 / 100}`"
                          class="drop-shadow-lg transition-all duration-1000">
                  </circle>
                </svg>
                
                <!-- Centro con estadisticas -->
                <div class="absolute inset-0 flex flex-col items-center justify-center text-center">
                  <div class="space-y-1">
                    <div class="text-3xl font-bold text-green-400">{{ porcentajePositivoTotal }}%</div>
                    <div class="text-xs text-gray-300">Positivo</div>
                  </div>
                  <div class="w-px h-8 bg-gray-600 my-2"></div>
                  <div class="space-y-1">
                    <div class="text-2xl font-bold text-red-400">{{ porcentajeNegativoTotal }}%</div>
                    <div class="text-xs text-gray-300">Negativo</div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Stats adicionales dinamicos -->
            <!-- Para preguntas 1-9 -->
            <div v-if="preguntaSeleccionada >= 1 && preguntaSeleccionada <= 9" class="grid grid-cols-5 gap-2 mt-6">
              <div class="text-center p-2 bg-white bg-opacity-10 rounded-xl backdrop-blur">
                <div class="text-lg font-bold text-emerald-400">{{ totalMuyBueno }}</div>
                <div class="text-xs text-gray-300">Muy Bueno</div>
              </div>
              <div class="text-center p-2 bg-white bg-opacity-10 rounded-xl backdrop-blur">
                <div class="text-lg font-bold text-green-400">{{ totalBueno }}</div>
                <div class="text-xs text-gray-300">Bueno</div>
              </div>
              <div class="text-center p-2 bg-white bg-opacity-10 rounded-xl backdrop-blur">
                <div class="text-lg font-bold text-yellow-400">{{ totalRegular }}</div>
                <div class="text-xs text-gray-300">Regular</div>
              </div>
              <div class="text-center p-2 bg-white bg-opacity-10 rounded-xl backdrop-blur">
                <div class="text-lg font-bold text-orange-400">{{ totalMalo }}</div>
                <div class="text-xs text-gray-300">Malo</div>
              </div>
              <div class="text-center p-2 bg-white bg-opacity-10 rounded-xl backdrop-blur">
                <div class="text-lg font-bold text-red-400">{{ totalMuyMalo }}</div>
                <div class="text-xs text-gray-300">Muy Malo</div>
              </div>
            </div>
            <!-- Para preguntas de opciones directas (14, 36) -->
            <div v-else-if="[14,36].includes(parseInt(preguntaSeleccionada))" 
                 class="grid gap-2 mt-6" 
                 :class="`grid-cols-${Math.min(opcionesDinamicas.length, 6)}`">
              <div v-for="(opcion, index) in opcionesDinamicas" :key="opcion"
                   class="text-center p-2 bg-white bg-opacity-10 rounded-xl backdrop-blur">
                <div class="text-lg font-bold" 
                     :style="{ color: `hsl(${200 + index * 40}, 70%, 70%)` }">
                  {{ datosVista.reduce((sum, r) => sum + (r[opcion] || 0), 0) }}
                </div>
                <div class="text-xs text-gray-300">{{ opcion.length > 12 ? opcion.substring(0, 12) + '...' : opcion }}</div>
              </div>
            </div>
            <!-- Para preguntas Si/No -->
            <div v-else-if="[10,15,24,25,31,32,37,39].includes(parseInt(preguntaSeleccionada))" 
                 class="grid gap-2 mt-6" 
                 :class="`grid-cols-${Math.min(opcionesDinamicas.length + 1, 6)}`">
              <div class="text-center p-2 bg-white bg-opacity-10 rounded-xl backdrop-blur">
                <div class="text-lg font-bold text-green-400">{{ totalSi }}</div>
                <div class="text-xs text-gray-300">Si</div>
              </div>
              <div v-for="(opcion, index) in opcionesDinamicas" :key="opcion"
                   class="text-center p-2 bg-white bg-opacity-10 rounded-xl backdrop-blur">
                <div class="text-lg font-bold" 
                     :style="{ color: `hsl(${350 - index * 30}, 70%, 70%)` }">
                  {{ datosVista.reduce((sum, r) => sum + (r[opcion] || 0), 0) }}
                </div>
                <div class="text-xs text-gray-300">{{ opcion.length > 12 ? opcion.substring(0, 12) + '...' : opcion }}</div>
              </div>
            </div>
            <!-- Para preguntas generales -->
            <div v-else class="grid grid-cols-3 gap-4 mt-6">
              <div class="text-center p-3 bg-white bg-opacity-10 rounded-xl backdrop-blur">
                <div class="text-2xl font-bold text-green-400">{{ totalPositivos }}</div>
                <div class="text-xs text-gray-300">Positivas</div>
              </div>
              <div class="text-center p-3 bg-white bg-opacity-10 rounded-xl backdrop-blur">
                <div class="text-2xl font-bold text-yellow-400">{{ totalNeutros }}</div>
                <div class="text-xs text-gray-300">Neutras</div>
              </div>
              <div class="text-center p-3 bg-white bg-opacity-10 rounded-xl backdrop-blur">
                <div class="text-2xl font-bold text-red-400">{{ totalNegativos }}</div>
                <div class="text-xs text-gray-300">Negativas</div>
              </div>
            </div>
          </div>
        </div>

        <!-- Reporte de Additional Info para preguntas Si/No -->
        <div v-if="[10,15,16,24,25,31,32,37,39].includes(parseInt(preguntaSeleccionada)) && (reporteAdditionalInfo.totalRespuestasNo > 0 || opcionesDinamicas.length > 0)" 
             class="bg-gradient-to-r from-purple-50 to-purple-100 rounded-2xl p-6 border border-purple-200 mb-8">
          <h3 class="text-xl font-bold mb-6 flex items-center">
            <svg class="w-6 h-6 mr-2 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            Reporte de Opciones Detalladas
            <span class="ml-3 px-3 py-1 bg-purple-200 text-purple-800 text-sm font-medium rounded-full">
              {{ datosFiltrados.length }} respuestas
            </span>
          </h3>
          
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- Resumen Global -->
            <div class="bg-white rounded-xl p-5 border border-purple-200">
              <h4 class="font-bold text-purple-900 mb-4 flex items-center">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
                Frecuencia de Opciones Adicionales
              </h4>
              <div class="space-y-3 max-h-80 overflow-y-auto">
                <div v-for="(info, index) in reporteAdditionalInfo.informacionAdicional" :key="index"
                     class="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                  <div class="flex-1">
                    <div class="text-sm font-medium text-gray-900 break-words">{{ info.texto }}</div>
                    <div class="text-xs text-gray-500">{{ info.porcentaje }}% del total</div>
                  </div>
                  <div class="ml-3 flex items-center space-x-2">
                    <div class="w-12 bg-gray-200 rounded-full h-2 overflow-hidden">
                      <div class="h-2 bg-gradient-to-r from-purple-400 to-purple-600 rounded-full transition-all duration-500"
                           :style="{ width: info.porcentaje + '%' }">
                      </div>
                    </div>
                    <span class="text-sm font-bold text-purple-600 min-w-[2rem]">{{ info.total }}</span>
                  </div>
                </div>
              </div>
            </div>

          </div>
        </div>

        <!-- Tabla de Datos Mejorada -->
        <div class="bg-gradient-to-r from-gray-50 to-gray-100 rounded-2xl p-6 border border-gray-200">
          <h3 class="text-xl font-bold mb-6 flex items-center">
            <svg class="w-6 h-6 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v5.586a1 1 0 00.293.707l2 2a1 1 0 001.414 0l2-2A1 1 0 009 12.586V7"></path>
            </svg>
            Detalle por Regional
          </h3>
          
          <div class="overflow-x-auto rounded-xl border border-gray-300">
            <table class="w-full bg-white">
              <!-- Tabla para preguntas 1-9 (5 estados) -->
              <thead v-if="preguntaSeleccionada >= 1 && preguntaSeleccionada <= 9" class="bg-gradient-to-r from-blue-600 to-blue-700 text-white">
                <tr>
                  <th class="text-left py-4 px-6 font-bold">üè¢ Regional</th>
                  <th class="text-center py-4 px-3 font-bold">üìä Total</th>
                  <th class="text-center py-4 px-3 font-bold text-emerald-100">üåü Muy Bueno</th>
                  <th class="text-center py-4 px-3 font-bold text-green-100">‚úÖ Bueno</th>
                  <th class="text-center py-4 px-3 font-bold text-yellow-100">‚ûñ Regular</th>
                  <th class="text-center py-4 px-3 font-bold text-orange-100">‚ö†Ô∏è Malo</th>
                  <th class="text-center py-4 px-3 font-bold text-red-100">‚ùå Muy Malo</th>
                  <th class="text-center py-4 px-3 font-bold">üéØ Puntuacion</th>
                </tr>
              </thead>
              <!-- Tabla para preguntas de opciones directas (14, 36) -->
              <thead v-else-if="[14,36].includes(parseInt(preguntaSeleccionada))" class="bg-gradient-to-r from-blue-600 to-blue-700 text-white">
                <tr>
                  <th class="text-left py-4 px-6 font-bold">üè¢ Regional</th>
                  <th class="text-center py-4 px-2 font-bold">üìä Total</th>
                  <th v-for="opcion in opcionesDinamicas" :key="opcion"
                      class="text-center py-4 px-2 font-bold text-blue-100">
                    üìã {{ opcion.length > 12 ? opcion.substring(0, 12) + '...' : opcion }}
                  </th>
                  <th class="text-center py-4 px-2 font-bold">üìà Distribuci√≥n</th>
                </tr>
              </thead>
              <!-- Tabla para preguntas Si/No (din√°micas) -->
              <thead v-else-if="[10,15,24,25,31,32,37,39].includes(parseInt(preguntaSeleccionada))" class="bg-gradient-to-r from-blue-600 to-blue-700 text-white">
                <tr>
                  <th class="text-left py-4 px-6 font-bold">üè¢ Regional</th>
                  <th class="text-center py-4 px-2 font-bold">üìä Total</th>
                  <th class="text-center py-4 px-2 font-bold text-green-100">‚úÖ Si</th>
                  <th v-for="opcion in opcionesDinamicas" :key="opcion"
                      class="text-center py-4 px-2 font-bold text-red-100">
                    ‚ùå {{ opcion.length > 10 ? opcion.substring(0, 10) + '...' : opcion }}
                  </th>
                  <th class="text-center py-4 px-2 font-bold">üéØ Aceptacion</th>
                </tr>
              </thead>
              <!-- Tabla para preguntas generales (3 estados) -->
              <thead v-else class="bg-gradient-to-r from-blue-600 to-blue-700 text-white">
                <tr>
                  <th class="text-left py-4 px-6 font-bold">üè¢ Regional</th>
                  <th class="text-center py-4 px-4 font-bold">üìä Total</th>
                  <th class="text-center py-4 px-4 font-bold text-green-100">‚úÖ Positivos</th>
                  <th class="text-center py-4 px-4 font-bold text-red-100">‚ùå Negativos</th>
                  <th class="text-center py-4 px-4 font-bold text-yellow-100">‚ûñ Neutros</th>
                  <th class="text-center py-4 px-4 font-bold">üéØ Satisfaccion</th>
                </tr>
              </thead>
              <tbody class="divide-y divide-gray-200">
                <tr v-for="(regional, index) in datosVista" :key="regional.regional" 
                    class="hover:bg-blue-50 transition-colors"
                    :class="index % 2 === 0 ? 'bg-gray-50' : 'bg-white'">
                  
                  <!-- Filas para preguntas 1-9 (5 estados) -->
                  <template v-if="preguntaSeleccionada >= 1 && preguntaSeleccionada <= 9">
                    <td class="py-4 px-6 font-bold text-gray-900">
                      <div class="flex items-center space-x-2">
                        <div class="w-3 h-3 rounded-full"
                             :class="regional.porcentajePositivo >= 70 ? 'bg-green-500' : 
                                    regional.porcentajePositivo >= 50 ? 'bg-yellow-500' : 'bg-red-500'">
                        </div>
                        <span>{{ regional.regional }}</span>
                      </div>
                    </td>
                    <td class="text-center py-4 px-3 font-semibold text-lg">{{ regional.total }}</td>
                    <td class="text-center py-4 px-3">
                      <span class="px-2 py-1 bg-emerald-100 text-emerald-800 font-bold rounded-full text-sm">
                        {{ regional.muy_bueno || 0 }}
                      </span>
                    </td>
                    <td class="text-center py-4 px-3">
                      <span class="px-2 py-1 bg-green-100 text-green-800 font-bold rounded-full text-sm">
                        {{ regional.bueno || 0 }}
                      </span>
                    </td>
                    <td class="text-center py-4 px-3">
                      <span class="px-2 py-1 bg-yellow-100 text-yellow-800 font-bold rounded-full text-sm">
                        {{ regional.regular || 0 }}
                      </span>
                    </td>
                    <td class="text-center py-4 px-3">
                      <span class="px-2 py-1 bg-orange-100 text-orange-800 font-bold rounded-full text-sm">
                        {{ regional.malo || 0 }}
                      </span>
                    </td>
                    <td class="text-center py-4 px-3">
                      <span class="px-2 py-1 bg-red-100 text-red-800 font-bold rounded-full text-sm">
                        {{ regional.muy_malo || 0 }}
                      </span>
                    </td>
                    <td class="text-center py-4 px-3">
                      <div class="flex items-center justify-center space-x-2">
                        <div class="w-16 bg-gray-200 rounded-full h-3 overflow-hidden">
                          <div class="h-3 rounded-full transition-all duration-1000"
                               :class="regional.porcentajePositivo >= 70 ? 'bg-gradient-to-r from-green-400 to-green-600' : 
                                      regional.porcentajePositivo >= 50 ? 'bg-gradient-to-r from-yellow-400 to-yellow-600' : 
                                      'bg-gradient-to-r from-red-400 to-red-600'"
                               :style="{ width: regional.porcentajePositivo + '%' }">
                          </div>
                        </div>
                        <span class="font-bold text-sm"
                              :class="regional.porcentajePositivo >= 70 ? 'text-green-600' : 
                                     regional.porcentajePositivo >= 50 ? 'text-yellow-600' : 'text-red-600'">
                          {{ regional.porcentajePositivo }}%
                        </span>
                      </div>
                    </td>
                  </template>

                  <!-- Filas para preguntas de opciones directas (14, 36) -->
                  <template v-else-if="[14,36].includes(parseInt(preguntaSeleccionada))">
                    <td class="py-4 px-6 font-bold text-gray-900">
                      <div class="flex items-center space-x-2">
                        <div class="w-3 h-3 rounded-full bg-blue-500"></div>
                        <span>{{ regional.regional }}</span>
                      </div>
                    </td>
                    <td class="text-center py-4 px-2 font-semibold text-lg">{{ regional.total }}</td>
                    <td v-for="(opcion, index) in opcionesDinamicas" :key="opcion" class="text-center py-4 px-2">
                      <span class="px-2 py-1 font-bold rounded-full text-sm"
                            :style="{ 
                              background: `hsl(${200 + index * 40}, 70%, ${85 - index * 3}%)`,
                              color: `hsl(${200 + index * 40}, 70%, ${25 - index * 3}%)`
                            }">
                        {{ regional[opcion] || 0 }}
                      </span>
                    </td>
                    <td class="text-center py-4 px-2">
                      <div class="flex items-center justify-center space-x-1">
                        <div class="w-12 bg-gray-200 rounded-full h-3 overflow-hidden">
                          <div class="h-3 rounded-full transition-all duration-1000 bg-gradient-to-r from-blue-400 to-blue-600"
                               :style="{ width: '100%' }">
                          </div>
                        </div>
                        <span class="font-bold text-xs text-blue-600">100%</span>
                      </div>
                    </td>
                  </template>

                  <!-- Filas para preguntas Si/No (dinamicas) -->
                  <template v-else-if="[10,15,24,25,31,32,37,39].includes(parseInt(preguntaSeleccionada))">
                    <td class="py-4 px-6 font-bold text-gray-900">
                      <div class="flex items-center space-x-2">
                        <div class="w-3 h-3 rounded-full"
                             :class="regional.porcentajePositivo >= 70 ? 'bg-green-500' : 
                                    regional.porcentajePositivo >= 50 ? 'bg-yellow-500' : 'bg-red-500'">
                        </div>
                        <span>{{ regional.regional }}</span>
                      </div>
                    </td>
                    <td class="text-center py-4 px-2 font-semibold text-lg">{{ regional.total }}</td>
                    <td class="text-center py-4 px-2">
                      <span class="px-2 py-1 bg-green-100 text-green-800 font-bold rounded-full text-sm">
                        {{ regional.si || 0 }}
                      </span>
                    </td>
                    <td v-for="(opcion, index) in opcionesDinamicas" :key="opcion" class="text-center py-4 px-2">
                      <span class="px-2 py-1 font-bold rounded-full text-sm"
                            :style="{ 
                              background: `hsl(${350 - index * 30}, 70%, ${85 - index * 5}%)`,
                              color: `hsl(${350 - index * 30}, 70%, ${25 - index * 5}%)`
                            }">
                        {{ regional[opcion] || 0 }}
                      </span>
                    </td>
                    <td class="text-center py-4 px-2">
                      <div class="flex items-center justify-center space-x-1">
                        <div class="w-12 bg-gray-200 rounded-full h-3 overflow-hidden">
                          <div class="h-3 rounded-full transition-all duration-1000"
                               :class="regional.porcentajePositivo >= 70 ? 'bg-gradient-to-r from-green-400 to-green-600' : 
                                      regional.porcentajePositivo >= 50 ? 'bg-gradient-to-r from-yellow-400 to-yellow-600' : 
                                      'bg-gradient-to-r from-red-400 to-red-600'"
                               :style="{ width: regional.porcentajePositivo + '%' }">
                          </div>
                        </div>
                        <span class="font-bold text-xs"
                              :class="regional.porcentajePositivo >= 70 ? 'text-green-600' : 
                                     regional.porcentajePositivo >= 50 ? 'text-yellow-600' : 'text-red-600'">
                          {{ regional.porcentajePositivo }}%
                        </span>
                      </div>
                    </td>
                  </template>

                  <!-- Filas para preguntas 10-39 (3 estados) -->
                  <template v-else>
                    <td class="py-4 px-6 font-bold text-gray-900">
                      <div class="flex items-center space-x-2">
                        <div class="w-3 h-3 rounded-full"
                             :class="regional.porcentajePositivo >= 70 ? 'bg-green-500' : 
                                    regional.porcentajePositivo >= 50 ? 'bg-yellow-500' : 'bg-red-500'">
                        </div>
                        <span>{{ regional.regional }}</span>
                      </div>
                    </td>
                    <td class="text-center py-4 px-4 font-semibold text-lg">{{ regional.total }}</td>
                    <td class="text-center py-4 px-4">
                      <span class="px-3 py-1 bg-green-100 text-green-800 font-bold rounded-full">
                        {{ regional.positivos }}
                      </span>
                    </td>
                    <td class="text-center py-4 px-4">
                      <span class="px-3 py-1 bg-red-100 text-red-800 font-bold rounded-full">
                        {{ regional.negativos }}
                      </span>
                    </td>
                    <td class="text-center py-4 px-4">
                      <span class="px-3 py-1 bg-yellow-100 text-yellow-800 font-bold rounded-full">
                        {{ regional.neutros }}
                      </span>
                    </td>
                    <td class="text-center py-4 px-4">
                      <div class="flex items-center justify-center space-x-2">
                        <div class="w-20 bg-gray-200 rounded-full h-3 overflow-hidden">
                          <div class="h-3 rounded-full transition-all duration-1000"
                               :class="regional.porcentajePositivo >= 70 ? 'bg-gradient-to-r from-green-400 to-green-600' : 
                                      regional.porcentajePositivo >= 50 ? 'bg-gradient-to-r from-yellow-400 to-yellow-600' : 
                                      'bg-gradient-to-r from-red-400 to-red-600'"
                               :style="{ width: regional.porcentajePositivo + '%' }">
                          </div>
                        </div>
                        <span class="font-bold text-lg"
                              :class="regional.porcentajePositivo >= 70 ? 'text-green-600' : 
                                     regional.porcentajePositivo >= 50 ? 'text-yellow-600' : 'text-red-600'">
                          {{ regional.porcentajePositivo }}%
                        </span>
                      </div>
                    </td>
                  </template>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
        </div>
        
        <!-- Seccion de Sugerencias -->
        <div v-if="sugerencias.length > 0" class="mt-8 bg-gradient-to-br from-green-50 to-emerald-100 rounded-3xl p-6 lg:p-8 border border-green-200 shadow-lg">
          <h3 class="text-2xl lg:text-3xl font-bold text-center mb-6 lg:mb-8 text-green-900 flex items-center justify-center">
            <svg class="w-8 h-8 mr-3 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
            </svg>
            Sugerencias del Personal
          </h3>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <div v-for="(sugerencia, index) in sugerencias.slice(0, 12)" :key="index" 
                 class="bg-white rounded-xl p-4 shadow-sm border border-green-100 hover:shadow-md transition-all duration-300">
              <div class="flex items-start space-x-3">
                <div class="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center flex-shrink-0">
                  <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
                <div class="flex-1 min-w-0">
                  <p class="text-sm text-gray-800 leading-relaxed">{{ sugerencia.texto }}</p>
                  <div class="mt-2 flex items-center space-x-2">
                    <span class="px-2 py-1 bg-green-100 text-green-700 text-xs font-medium rounded">
                      {{ sugerencia.regional }}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div v-if="sugerencias.length > 12" class="text-center mt-6">
            <p class="text-green-700 font-medium">Y {{ sugerencias.length - 12 }} sugerencias m√°s...</p>
          </div>
        </div>
      </div>

      <!-- Estado sin pregunta seleccionada -->
      <div v-else-if="!preguntaSeleccionada" class="bg-white rounded-2xl shadow-xl p-12 text-center border border-gray-200">
        <div class="w-24 h-24 bg-gradient-to-br from-blue-100 to-blue-200 rounded-full flex items-center justify-center mx-auto mb-6">
          <svg class="w-12 h-12 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
          </svg>
        </div>
        <h3 class="text-2xl font-bold text-gray-900 mb-4">Selecciona una Pregunta para Analizar</h3>
        <p class="text-gray-600 mb-8 max-w-md mx-auto">
          Utiliza el filtro "Pregunta a Analizar" para seleccionar una pregunta especifica y ver el reporte comparativo por regional con graficos interactivos.
        </p>
        <div class="flex items-center justify-center space-x-2 text-sm text-gray-500">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <span>39 preguntas disponibles organizadas por categoria</span>
        </div>
      </div>

      <!-- Estado sin datos -->
      <div v-else-if="preguntaSeleccionada && datosVista.length === 0" class="bg-white rounded-2xl shadow-xl p-12 text-center border border-gray-200">
        <div class="w-24 h-24 bg-gradient-to-br from-gray-100 to-gray-200 rounded-full flex items-center justify-center mx-auto mb-6">
          <svg class="w-12 h-12 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
          </svg>
        </div>
        <h3 class="text-2xl font-bold text-gray-900 mb-4">No Hay Datos Disponibles</h3>
        <p class="text-gray-600 mb-6">
          No se encontraron respuestas para la pregunta {{ preguntaSeleccionada }} con los filtros seleccionados.
        </p>
        <button @click="limpiarFiltros" class="px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-colors">
          Limpiar Filtros
        </button>
      </div>
    </main>
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Progress } from '@/components/ui/progress'
import { Button } from '@/components/ui/button'
import { Pagination, PaginationContent, PaginationItem, PaginationNext, PaginationPrevious } from '@/components/ui/pagination'

// Estados reactivos principales
const cargando = ref(false)
const error = ref('')
const datosAPI = ref([])
const filtroRegional = ref('')
const filtroArea = ref('')
const preguntaSeleccionada = ref('')

// Estados para paginacion de sugerencias
const sugerenciasPagina = ref(1)
const sugerenciasPorPagina = ref(9)

// Datos extraidos de la API
const regionalesDisponibles = ref([])
const areasDisponibles = ref([])

// Catalogo de preguntas (sin caracteres especiales)
const preguntasDisponibles = ref([
  { id: 1, categoria: 'Puesto de Trabajo', texto: 'El trabajo en mi area/unidad esta bien organizado' },
  { id: 2, categoria: 'Puesto de Trabajo', texto: 'Mis funciones y responsabilidades estan definidas claramente' },
  { id: 3, categoria: 'Puesto de Trabajo', texto: 'Recibo informacion de como desempeno mi puesto de trabajo' },
  { id: 4, categoria: 'Ambiente de Trabajo', texto: 'La relacion con los companeros de trabajo es buena' },
  { id: 5, categoria: 'Ambiente de Trabajo', texto: 'Me siento parte de un equipo de trabajo' },
  { id: 6, categoria: 'Ambiente de Trabajo', texto: 'Me resulta facil expresar mis opiniones en mi lugar de trabajo' },
  { id: 7, categoria: 'Infraestructura', texto: 'Dispongo de los materiales y recursos necesarios para mi trabajo' },
  { id: 8, categoria: 'Infraestructura', texto: 'Las condiciones de espacio, comodidad, ruido, temperatura e iluminacion son buenas' },
  { id: 9, categoria: 'Infraestructura', texto: 'Las areas de trabajo se conservan limpias y en orden' },
  { id: 10, categoria: 'Comunicacion', texto: 'En MINOIL esta claramente comunicada la filosofia de la empresa' },
  { id: 11, categoria: 'Comunicacion', texto: 'Me siento coparticipe de los exitos y fracasos de mi area' },
  { id: 12, categoria: 'Comunicacion', texto: 'Conozco el codigo etico y de conducta de la organizacion' },
  { id: 13, categoria: 'Comunicacion', texto: 'La comunicacion interna es permanente y planificada' },
  { id: 14, categoria: 'Comunicacion', texto: 'Tengo canales claros para hacer sugerencias o denuncias' },
  { id: 15, categoria: 'Motivacion', texto: 'Estoy motivado para realizar mi trabajo' },
  { id: 16, categoria: 'Motivacion', texto: 'Mi trabajo me ofrece retos y oportunidades de mejora' },
  { id: 17, categoria: 'Motivacion', texto: 'Se como mi trabajo contribuye a los resultados del departamento' },
  { id: 18, categoria: 'Motivacion', texto: 'Tengo la informacion necesaria para realizar mi trabajo con excelencia' },
  { id: 19, categoria: 'Motivacion', texto: 'Mi trabajo es reconocido y valorado' },
  { id: 20, categoria: 'Motivacion', texto: 'Recibo capacitacion en areas de mi interes' },
  { id: 21, categoria: 'Autonomia', texto: 'Me siento comprometido para alcanzar las metas establecidas' },
  { id: 22, categoria: 'Autonomia', texto: 'Tengo autonomia para proponer y modificar procesos de trabajo' },
  { id: 23, categoria: 'Trabajo en Equipo', texto: 'Solucionar problemas es mas importante que encontrar culpables' },
  { id: 24, categoria: 'Trabajo en Equipo', texto: 'Formo parte de un equipo que trabaja hacia una meta comun' },
  { id: 25, categoria: 'Trabajo en Equipo', texto: 'Hay buena coordinacion con otras areas de MINOIL' },
  { id: 26, categoria: 'Presion', texto: 'El estres del trabajo en mi area es manejable' },
  { id: 27, categoria: 'Presion', texto: 'Tengo herramientas para manejar mi estres laboral' },
  { id: 28, categoria: 'Presion', texto: 'Tengo mucho trabajo y poco tiempo para realizarlo' },
  { id: 29, categoria: 'Presion', texto: 'Siento que nunca tengo un dia libre' },
  { id: 30, categoria: 'Liderazgo', texto: 'Mi supervisor es justo en sus decisiones' },
  { id: 31, categoria: 'Liderazgo', texto: 'Mi jefe tiene las habilidades para liderar el area' },
  { id: 32, categoria: 'Liderazgo', texto: 'Mi jefe actua de manera correcta' },
  { id: 33, categoria: 'Liderazgo', texto: 'Mi superior respeta la confidencialidad de nuestras conversaciones' },
  { id: 34, categoria: 'Liderazgo', texto: 'Mi jefe es justo y flexible ante mis peticiones' },
  { id: 35, categoria: 'Liderazgo', texto: 'Puedo contar con la ayuda de mi jefe cuando la necesito' },
  { id: 36, categoria: 'Satisfaccion General', texto: 'Tengo motivos para seguir trabajando en MINOIL' },
  { id: 37, categoria: 'Remuneracion', texto: 'Me pagan lo justo por mi trabajo' },
  { id: 38, categoria: 'Remuneracion', texto: 'Recibo informacion sobre los componentes de mi salario' },
  { id: 39, categoria: 'Remuneracion', texto: 'Estoy satisfecho con los beneficios que ofrece la organizacion' }
])

// Funcion de carga de datos mejorada
const cargarDatos = async () => {
  cargando.value = true
  error.value = ''
  
  try {
    console.log('üîÑ Iniciando carga desde API...')
    
    const response = await fetch('http://190.171.225.68/api/climate-reponse', {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      mode: 'cors'
    })
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }
    
    const data = await response.json()
    
    if (!Array.isArray(data)) {
      throw new Error('Formato de datos incorrecto - se esperaba un array')
    }
    
    datosAPI.value = data
    
    // Extraer listas unicas
    const regionales = [...new Set(data.map(item => item.regional).filter(Boolean))].sort()
    const areas = [...new Set(data.map(item => item.area).filter(Boolean))].sort()
    
    regionalesDisponibles.value = regionales
    areasDisponibles.value = areas
    
    console.log('‚úÖ Datos cargados exitosamente:')
    console.log(`  üìä ${data.length} registros totales`)
    console.log(`  üè¢ ${regionales.length} regionales: ${regionales.join(', ')}`)
    console.log(`  üîß ${areas.length} areas`)
    
  } catch (err) {
    const mensaje = `Error al conectar con la API: ${err.message}`
    error.value = mensaje
    console.error('‚ùå', mensaje, err)
    
    // Limpiar datos en caso de error
    datosAPI.value = []
    regionalesDisponibles.value = []
    areasDisponibles.value = []
  } finally {
    cargando.value = false
  }
}

// Funcion para clasificar respuestas
const clasificarRespuesta = (respuesta, preguntaId = null, additionalInfo = null) => {
  if (!respuesta) return 'neutro'
  
  const texto = respuesta.toString().toLowerCase().trim()
  const preguntaIdNum = parseInt(preguntaId)
  
  // Preguntas 1-9 usan escala especifica de 5 estados en ingles
  if (preguntaIdNum >= 1 && preguntaIdNum <= 9) {
    if (texto.includes('very good') || texto.includes('verigood')) return 'muy_bueno'
    if (texto.includes('good') && !texto.includes('very')) return 'bueno'
    if (texto.includes('average')) return 'regular'
    if (texto.includes('bad') && !texto.includes('very')) return 'malo'
    if (texto.includes('very bad')) return 'muy_malo'
    return 'regular' // default para preguntas 1-9
  }
  
  // Preguntas especiales que NO usan clasificarRespuesta
  // NOTA: Estas preguntas se procesan directamente en datosVista
  const preguntasSiNo = [10, 15, 16, 24, 25, 31, 32, 37, 39] // Con 16, sin 36
  const preguntasOpcionesDirectas = [14, 36] // Opciones directas
  
  if (preguntasSiNo.includes(preguntaIdNum)) {
    console.warn('‚ö†Ô∏è clasificarRespuesta NO debe usarse para preguntas Si/No:', preguntaIdNum)
    return 'error'
  }
  
  if (preguntasOpcionesDirectas.includes(preguntaIdNum)) {
    console.warn('‚ö†Ô∏è clasificarRespuesta NO debe usarse para preguntas de opciones directas:', preguntaIdNum)
    return 'error'
  }
  
  // Para todas las demas preguntas (11-14, 16-23, 26-30, 33-35, 38) - clasificacion general
  // Respuestas claramente positivas
  const positivas = ['si', 'yes', 'excelente', 'muy bueno', 'bueno', 'excellent', 'very good', 'good', '5', '4']
  if (positivas.some(p => texto.includes(p))) return 'positivo'
  
  // Respuestas claramente negativas  
  const negativas = ['no', 'malo', 'muy malo', 'poor', 'very poor', 'below average', '2', '1']
  if (negativas.some(n => texto.includes(n))) return 'negativo'
  
  // Escala numerica
  if (texto === '3' || texto.includes('regular') || texto.includes('average')) return 'neutro'
  
  return 'neutro'
}

// Computed properties principales
const filtrosActivos = computed(() => {
  return filtroRegional.value || filtroArea.value || preguntaSeleccionada.value
})

const contadorFiltros = computed(() => {
  let count = 0
  if (filtroRegional.value) count++
  if (filtroArea.value) count++
  if (preguntaSeleccionada.value) count++
  return count
})

const preguntaActual = computed(() => {
  return preguntasDisponibles.value.find(p => p.id == preguntaSeleccionada.value)
})

const categoriasUnicas = computed(() => {
  return [...new Set(preguntasDisponibles.value.map(p => p.categoria))].sort()
})

const preguntasOrdenadas = computed(() => {
  return preguntasDisponibles.value.sort((a, b) => a.id - b.id)
})

const preguntasPorCategoria = (categoria) => {
  return preguntasDisponibles.value
    .filter(p => p.categoria === categoria)
    .sort((a, b) => a.id - b.id)
}

const datosFiltrados = computed(() => {
  if (!datosAPI.value.length || !preguntaSeleccionada.value) return []
  
  return datosAPI.value.filter(item => {
    // Filtrar por pregunta especifica (permitir tanto string como number)
    if (item.question_id != preguntaSeleccionada.value) return false
    
    // Aplicar filtros opcionales
    if (filtroRegional.value && item.regional !== filtroRegional.value) return false
    if (filtroArea.value && item.area !== filtroArea.value) return false
    
    return true
  })
})

const datosVista = computed(() => {
  if (!datosFiltrados.value.length) return []
  
  const agrupados = {}
  const preguntaIdNum = parseInt(preguntaSeleccionada.value)
  const esPreguntas1a9 = preguntaIdNum >= 1 && preguntaIdNum <= 9
  const preguntasSiNo = [10, 15, 24, 25, 31, 32, 37, 39] // Remov√≠ 36 de aqu√≠
  const preguntasOpcionesDirectas = [14, 36] // Preguntas con opciones directas a, b, c, d
  const esPreguntaSiNo = preguntasSiNo.includes(preguntaIdNum)
  const esPreguntaOpcionesDirectas = preguntasOpcionesDirectas.includes(preguntaIdNum)
  
  // Primer paso: recopilar todas las opciones √∫nicas
  let opcionesUnicas = new Set()
  
  // Para preguntas Si/No
  if (esPreguntaSiNo) {
    datosFiltrados.value.forEach(item => {
      const texto = item.response_text?.toString().trim()
      if (texto === 'Si' || texto === 'si' || texto.toLowerCase() === 'si') {
        opcionesUnicas.add('Si')
      } else if (texto === 'No' || texto === 'no' || texto.toLowerCase() === 'no') {
        const info = item.additional_info?.toString().trim() || ''
        if (info && info !== 'Sin informaci√≥n adicional') { 
          // Si hay additional_info, usarlo
          opcionesUnicas.add(info)
        } else {
          // Si no hay additional_info, simplemente agregar "No"
          opcionesUnicas.add('No')
        }
      }
    })
  }
  
  // Para preguntas de opciones directas (14, 36)
  if (esPreguntaOpcionesDirectas) {
    datosFiltrados.value.forEach(item => {
      const respuesta = item.response_text?.toString().trim()
      if (respuesta) {
        opcionesUnicas.add(respuesta)
      }
    })
  }
  
  // Agrupar respuestas por regional
  datosFiltrados.value.forEach(item => {
    const regional = item.regional || 'Sin Regional'
    
    if (!agrupados[regional]) {
      const baseStructure = {
        regional,
        total: 0,
        additionalInfoKeys: []
      }
      
      if (esPreguntas1a9) {
        // Para preguntas 1-9: 5 estados especificos
        Object.assign(baseStructure, {
          muy_bueno: 0,
          bueno: 0,
          regular: 0,
          malo: 0,
          muy_malo: 0
        })
      } else if (esPreguntaSiNo) {
        // Para preguntas Si/No: usar opciones din√°micas de additional_info
        Object.assign(baseStructure, { si: 0 })
        opcionesUnicas.forEach(opcion => {
          if (opcion !== 'Si') {
            baseStructure[opcion] = 0
            baseStructure.additionalInfoKeys.push(opcion)
          }
        })
        // Para compatibilidad
        baseStructure.positivos = 0
        baseStructure.negativos = 0
        baseStructure.neutros = 0
      } else if (esPreguntaOpcionesDirectas) {
        // Para preguntas de opciones directas (14, 36): usar todas las opciones
        opcionesUnicas.forEach(opcion => {
          baseStructure[opcion] = 0
        })
        // Para compatibilidad
        baseStructure.positivos = 0
        baseStructure.negativos = 0
        baseStructure.neutros = 0
      } else {
        // Para preguntas generales: 3 estados
        Object.assign(baseStructure, {
          positivos: 0,
          negativos: 0,
          neutros: 0
        })
      }
      
      agrupados[regional] = baseStructure
    }
    
    agrupados[regional].total++
    
    if (esPreguntas1a9) {
      const tipo = clasificarRespuesta(item.response_text, item.question_id, item.additional_info)
      agrupados[regional][tipo]++
    } else if (esPreguntaSiNo) {
      const texto = item.response_text?.toString().trim()
      if (texto === 'Si' || texto === 'si' || texto.toLowerCase() === 'si') {
        agrupados[regional].si++
        agrupados[regional].positivos++
      } else if (texto === 'No' || texto === 'no' || texto.toLowerCase() === 'no') {
        const info = item.additional_info?.toString().trim() || ''
        if (info && info !== 'Sin informaci√≥n adicional' && agrupados[regional][info] !== undefined) {
          // Si hay additional_info espec√≠fico, contarlo
          agrupados[regional][info]++
        } else if (agrupados[regional]['No'] !== undefined) {
          // Si no hay additional_info pero hay opci√≥n "No", contarlo
          agrupados[regional]['No']++
        }
        agrupados[regional].negativos++
      }
    } else if (esPreguntaOpcionesDirectas) {
      const respuesta = item.response_text?.toString().trim()
      if (respuesta && agrupados[regional][respuesta] !== undefined) {
        agrupados[regional][respuesta]++
      }
      // Para preguntas de opciones directas, todas se consideran como respuestas v√°lidas
      agrupados[regional].positivos++
    } else {
      const tipo = clasificarRespuesta(item.response_text, item.question_id, item.additional_info)
      agrupados[regional][tipo + 's']++
    }
  })
  
  // Convertir a array con porcentajes calculados
  return Object.values(agrupados).map(regional => {
    if (esPreguntas1a9) {
      return {
        ...regional,
        porcentajeMuyBueno: Math.round((regional.muy_bueno / regional.total) * 100) || 0,
        porcentajeBueno: Math.round((regional.bueno / regional.total) * 100) || 0,
        porcentajeRegular: Math.round((regional.regular / regional.total) * 100) || 0,
        porcentajeMalo: Math.round((regional.malo / regional.total) * 100) || 0,
        porcentajeMuyMalo: Math.round((regional.muy_malo / regional.total) * 100) || 0,
        // Calcular positivos y negativos combinados para compatibilidad
        positivos: regional.muy_bueno + regional.bueno,
        negativos: regional.malo + regional.muy_malo,
        neutros: regional.regular,
        porcentajePositivo: Math.round(((regional.muy_bueno + regional.bueno) / regional.total) * 100) || 0,
        porcentajeNegativo: Math.round(((regional.malo + regional.muy_malo) / regional.total) * 100) || 0
      }
    } else if (esPreguntaSiNo) {
      return {
        ...regional,
        porcentajeSi: Math.round((regional.si / regional.total) * 100) || 0,
        porcentajeNoLeve: Math.round((regional.no_leve / regional.total) * 100) || 0,
        porcentajeNoModerado: Math.round((regional.no_moderado / regional.total) * 100) || 0,
        porcentajeNoCritico: Math.round((regional.no_critico / regional.total) * 100) || 0,
        porcentajeNoSinDetalle: Math.round((regional.no_sin_detalle / regional.total) * 100) || 0,
        // Calcular positivos y negativos combinados para compatibilidad
        positivos: regional.si,
        negativos: regional.no_leve + regional.no_moderado + regional.no_critico + regional.no_sin_detalle,
        neutros: 0,
        porcentajePositivo: Math.round((regional.si / regional.total) * 100) || 0,
        porcentajeNegativo: Math.round(((regional.no_leve + regional.no_moderado + regional.no_critico + regional.no_sin_detalle) / regional.total) * 100) || 0
      }
    } else {
      return {
        ...regional,
        porcentajePositivo: Math.round((regional.positivos / regional.total) * 100) || 0,
        porcentajeNegativo: Math.round((regional.negativos / regional.total) * 100) || 0,
        porcentajeNeutro: Math.round((regional.neutros / regional.total) * 100) || 0
      }
    }
  }).sort((a, b) => b.total - a.total) // Ordenar por total descendente
})

// Metricas agregadas
const totalRespuestas = computed(() => datosFiltrados.value.length)
const totalPositivos = computed(() => datosVista.value.reduce((sum, r) => sum + (r.positivos || 0), 0))
const totalNegativos = computed(() => datosVista.value.reduce((sum, r) => sum + (r.negativos || 0), 0))
const totalNeutros = computed(() => datosVista.value.reduce((sum, r) => sum + (r.neutros || 0), 0))

// Metricas especificas para preguntas 1-9
const totalMuyBueno = computed(() => datosVista.value.reduce((sum, r) => sum + (r.muy_bueno || 0), 0))
const totalBueno = computed(() => datosVista.value.reduce((sum, r) => sum + (r.bueno || 0), 0))
const totalRegular = computed(() => datosVista.value.reduce((sum, r) => sum + (r.regular || 0), 0))
const totalMalo = computed(() => datosVista.value.reduce((sum, r) => sum + (r.malo || 0), 0))
const totalMuyMalo = computed(() => datosVista.value.reduce((sum, r) => sum + (r.muy_malo || 0), 0))

// Metricas especificas para preguntas Si/No
// M√©tricas espec√≠ficas para preguntas Si/No din√°micas
const totalSi = computed(() => datosVista.value.reduce((sum, r) => sum + (r.si || 0), 0))

// Para preguntas Si/No: calcular total de todas las opciones de additional_info
const totalAdditionalInfo = computed(() => {
  const preguntaIdNum = parseInt(preguntaSeleccionada.value)
  const preguntasSiNo = [10, 15, 24, 25, 31, 32, 36, 37, 39]
  
  if (!preguntasSiNo.includes(preguntaIdNum)) return 0
  
  let total = 0
  datosVista.value.forEach(regional => {
    opcionesDinamicas.value.forEach(opcion => {
      total += (regional[opcion] || 0)
    })
  })
  return total
})

// Totales din√°micos para gr√°fico nacional
const totalPositivosSiNo = computed(() => {
  const preguntaIdNum = parseInt(preguntaSeleccionada.value) 
  const preguntasSiNo = [10, 15, 16, 24, 25, 31, 32, 37, 39] // Con 16, sin 36
  const preguntasOpcionesDirectas = [14, 36]
  
  if (preguntasSiNo.includes(preguntaIdNum)) {
    return totalSi.value // Solo los "Si" son positivos
  }
  if (preguntasOpcionesDirectas.includes(preguntaIdNum)) {
    return totalPositivos.value // Para opciones directas, todas son positivas
  }
  return totalPositivos.value // Para otras preguntas, usar l√≥gica original
})

const totalNegativosSiNo = computed(() => {
  const preguntaIdNum = parseInt(preguntaSeleccionada.value)
  const preguntasSiNo = [10, 15, 16, 24, 25, 31, 32, 37, 39] // Con 16, sin 36
  const preguntasOpcionesDirectas = [14, 36]
  
  if (preguntasSiNo.includes(preguntaIdNum)) {
    return totalAdditionalInfo.value // Todos los additional_info son negativos
  }
  if (preguntasOpcionesDirectas.includes(preguntaIdNum)) {
    return 0 // Para opciones directas, no hay negativos
  }
  return totalNegativos.value // Para otras preguntas, usar l√≥gica original
})

// M√©tricas legacy (para compatibilidad)
const totalNoLeve = computed(() => datosVista.value.reduce((sum, r) => sum + (r.no_leve || 0), 0))
const totalNoModerado = computed(() => datosVista.value.reduce((sum, r) => sum + (r.no_moderado || 0), 0))
const totalNoCritico = computed(() => datosVista.value.reduce((sum, r) => sum + (r.no_critico || 0), 0))
const totalNoSinDetalle = computed(() => datosVista.value.reduce((sum, r) => sum + (r.no_sin_detalle || 0), 0))

const porcentajePositivoTotal = computed(() => {
  return totalRespuestas.value > 0 ? Math.round((totalPositivosSiNo.value / totalRespuestas.value) * 100) : 0
})

const porcentajeNegativoTotal = computed(() => {
  return totalRespuestas.value > 0 ? Math.round((totalNegativosSiNo.value / totalRespuestas.value) * 100) : 0
})

// Obtener opciones din√°micas para preguntas especiales
const opcionesDinamicas = computed(() => {
  const preguntaIdNum = parseInt(preguntaSeleccionada.value)
  const preguntasSiNo = [10, 15, 16, 24, 25, 31, 32, 37, 39] // Con 16, sin 36
  const preguntasOpcionesDirectas = [14, 36]
  
  if (!datosFiltrados.value.length) return []
  
  const opciones = new Set()
  
  // Para preguntas Si/No
  if (preguntasSiNo.includes(preguntaIdNum)) {
    datosFiltrados.value.forEach(item => {
      const texto = item.response_text?.toString().trim()
      if (texto === 'No' || texto === 'no' || texto.toLowerCase() === 'no') {
        const info = item.additional_info?.toString().trim() || ''
        if (info && info !== 'Sin informaci√≥n adicional') { 
          opciones.add(info)
        } else {
          opciones.add('No')
        }
      }
    })
  }
  
  // Para preguntas de opciones directas (14, 36)
  if (preguntasOpcionesDirectas.includes(preguntaIdNum)) {
    datosFiltrados.value.forEach(item => {
      const respuesta = item.response_text?.toString().trim()
      if (respuesta) {
        opciones.add(respuesta)
      }
    })
  }
  
  return Array.from(opciones).sort()
})

// Sugerencias del personal (pregunta 40)
const todasLasSugerencias = computed(() => {
  const sugerenciasData = datosAPI.value.filter(item => 
    item.question_id === "40" && 
    item.additional_info && 
    item.additional_info.trim() && 
    item.additional_info !== "null" &&
    item.additional_info.length > 10
  )
  
  return sugerenciasData.map(item => ({
    texto: item.additional_info.trim(),
    regional: item.regional || 'Sin regional'
  }))
})

// Sugerencias paginadas
const sugerencias = computed(() => {
  const inicio = (sugerenciasPagina.value - 1) * sugerenciasPorPagina.value
  const fin = inicio + sugerenciasPorPagina.value
  return todasLasSugerencias.value.slice(inicio, fin)
})

// Total de p√°ginas para sugerencias
const totalPaginasSugerencias = computed(() => {
  return Math.ceil(todasLasSugerencias.value.length / sugerenciasPorPagina.value)
})

// Reporte de additional_info para preguntas Si/No
const reporteAdditionalInfo = computed(() => {
  const preguntaIdNum = parseInt(preguntaSeleccionada.value)
  const preguntasSiNo = [10, 15, 16, 24, 25, 31, 32, 37, 39] // Con 16, sin 36
  
  if (!preguntasSiNo.includes(preguntaIdNum) || !datosFiltrados.value.length) {
    return {
      totalRespuestasNo: 0,
      informacionAdicional: [],
      detallesPorRegional: {}
    }
  }
  
  const respuestasNo = datosFiltrados.value.filter(item => 
    item.response_text && item.response_text.toString().toLowerCase().includes('no')
  )
  
  const conteoInfo = {}
  const detallesPorRegional = {}
  
  respuestasNo.forEach(item => {
    const regional = item.regional || 'Sin Regional'
    const info = item.additional_info || 'Sin informaci√≥n adicional'
    
    // Contar globalmente
    if (!conteoInfo[info]) {
      conteoInfo[info] = 0
    }
    conteoInfo[info]++
    
    // Agrupar por regional
    if (!detallesPorRegional[regional]) {
      detallesPorRegional[regional] = {}
    }
    if (!detallesPorRegional[regional][info]) {
      detallesPorRegional[regional][info] = 0
    }
    detallesPorRegional[regional][info]++
  })
  
  // Convertir a array ordenado por frecuencia
  const infoOrdenada = Object.entries(conteoInfo)
    .map(([info, count]) => ({
      texto: info,
      total: count,
      porcentaje: Math.round((count / respuestasNo.length) * 100) || 0
    }))
    .sort((a, b) => b.total - a.total)
  
  return {
    totalRespuestasNo: respuestasNo.length,
    informacionAdicional: infoOrdenada,
    detallesPorRegional
  }
})

// Funciones de accion
const actualizarDatos = () => {
  // Los computed properties se actualizan automaticamente
  console.log('üîÑ Filtros actualizados')
}

const limpiarFiltros = () => {
  filtroRegional.value = ''
  filtroArea.value = ''
  preguntaSeleccionada.value = ''
  console.log('üßπ Filtros limpiados')
}

const exportarReporte = () => {
  const reporte = {
    metadata: {
      fecha: new Date().toLocaleString('es-ES'),
      filtros: {
        regional: filtroRegional.value || 'Todas',
        area: filtroArea.value || 'Todas',
        pregunta: preguntaSeleccionada.value || 'Ninguna'
      },
      pregunta: preguntaActual.value
    },
    resumen: {
      totalRespuestas: totalRespuestas.value,
      porcentajePositivo: porcentajePositivoTotal.value,
      porcentajeNegativo: porcentajeNegativoTotal.value,
      regionalesAnalizadas: datosVista.value.length
    },
    datos: datosVista.value
  }
  
  const blob = new Blob([JSON.stringify(reporte, null, 2)], { type: 'application/json' })
  const url = URL.createObjectURL(blob)
  const a = document.createElement('a')
  a.href = url
  a.download = `clima-laboral-${new Date().toISOString().split('T')[0]}.json`
  a.click()
  URL.revokeObjectURL(url)
  
  console.log('üì• Reporte exportado')
}

const exportarPregunta = () => {
  exportarReporte()
}

const exportarReporteAdditionalInfo = () => {
  if (!reporteAdditionalInfo.value.totalRespuestasNo) {
    console.log('No hay datos de additional_info para exportar')
    return
  }
  
  const reporte = {
    metadata: {
      fecha: new Date().toLocaleString('es-ES'),
      pregunta: {
        id: preguntaSeleccionada.value,
        texto: preguntaActual.value?.texto,
        categoria: preguntaActual.value?.categoria
      },
      filtros: {
        regional: filtroRegional.value || 'Todas',
        area: filtroArea.value || 'Todas'
      }
    },
    resumenGlobal: {
      totalRespuestasNo: reporteAdditionalInfo.value.totalRespuestasNo,
      opcionesDiferentes: reporteAdditionalInfo.value.informacionAdicional.length
    },
    frecuenciaOpciones: reporteAdditionalInfo.value.informacionAdicional,
    detallesPorRegional: reporteAdditionalInfo.value.detallesPorRegional
  }
  
  const blob = new Blob([JSON.stringify(reporte, null, 2)], { type: 'application/json' })
  const url = URL.createObjectURL(blob)
  const a = document.createElement('a')
  a.href = url
  a.download = `additional-info-pregunta-${preguntaSeleccionada.value}-${new Date().toISOString().split('T')[0]}.json`
  a.click()
  URL.revokeObjectURL(url)
  
  console.log('üì• Reporte de additional_info exportado')
}

// Inicializacion
onMounted(() => {
  console.log('üöÄ Componente iniciado')
  cargarDatos()
})
</script>