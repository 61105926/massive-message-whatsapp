# Dockerfile específico para Coolify con más diagnósticos
FROM node:20-alpine AS builder

WORKDIR /app

# Debug: Mostrar información del build
RUN echo "=== BUILD STAGE ===" && \
    echo "Node version: $(node --version)" && \
    echo "NPM version: $(npm --version)"

COPY package*.json ./
RUN npm ci

COPY . .
RUN npm run build

# Verificar archivos de build
RUN echo "=== BUILD OUTPUT ===" && \
    ls -la dist/ && \
    echo "=== INDEX.HTML CONTENT ===" && \
    head -10 dist/index.html

# Etapa de producción
FROM nginx:alpine

# Instalar herramientas de debug
RUN apk add --no-cache curl wget

# Copiar archivos
COPY --from=builder /app/dist /usr/share/nginx/html

# Crear configuración nginx muy simple
RUN echo 'server { \
    listen 82; \
    server_name _; \
    root /usr/share/nginx/html; \
    index index.html; \
    location / { \
        try_files $uri $uri/ /index.html; \
    } \
    location /status { \
        return 200 "OK - $(date)"; \
        add_header Content-Type text/plain; \
    } \
}' > /etc/nginx/conf.d/default.conf

# Debug: Mostrar configuración
RUN echo "=== NGINX CONFIG ===" && \
    cat /etc/nginx/conf.d/default.conf && \
    echo "=== FILES SERVED ===" && \
    ls -la /usr/share/nginx/html/

# Verificar que nginx puede iniciar
RUN nginx -t

EXPOSE 82

# Script de inicio con debug
RUN echo '#!/bin/sh' > /start.sh && \
    echo 'echo "=== STARTING APPLICATION ==="' >> /start.sh && \
    echo 'echo "Time: $(date)"' >> /start.sh && \
    echo 'echo "Port: 82"' >> /start.sh && \
    echo 'echo "Files in html:"' >> /start.sh && \
    echo 'ls -la /usr/share/nginx/html/' >> /start.sh && \
    echo 'echo "Starting nginx..."' >> /start.sh && \
    echo 'exec nginx -g "daemon off;"' >> /start.sh && \
    chmod +x /start.sh

CMD ["/start.sh"]